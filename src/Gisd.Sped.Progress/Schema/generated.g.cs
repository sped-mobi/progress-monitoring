// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Gisd.Sped.Schema;
//
//    var dataCollection = DataCollection.FromJson(jsonString);

namespace Gisd.Sped.Schema
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class DataCollection
    {
        [JsonProperty("campus")]
        public string Campus { get; set; }

        [JsonProperty("students")]
        public List<Student> Students { get; set; }

        [JsonProperty("year")]
        public Year Year { get; set; }
    }

    public partial class Student
    {
        [JsonProperty("dob")]
        public DateTimeOffset Dob { get; set; }

        [JsonProperty("gender")]
        public Gender Gender { get; set; }

        [JsonProperty("goals", NullValueHandling = NullValueHandling.Ignore)]
        public List<Goal> Goals { get; set; }

        [JsonProperty("grade")]
        public string Grade { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Goal
    {
        [JsonProperty("annualGoal")]
        public string AnnualGoal { get; set; }

        [JsonProperty("focus")]
        public string Focus { get; set; }

        [JsonProperty("number")]
        public string Number { get; set; }

        [JsonProperty("objectives")]
        public List<Objective> Objectives { get; set; }
    }

    public partial class Objective
    {
        [JsonProperty("number")]
        public string Number { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public enum Gender { F, M };

    public enum Year { Sy20192020, Sy20202021 };

    public partial class DataCollection
    {
        public static DataCollection FromJson(string json) => JsonConvert.DeserializeObject<DataCollection>(json, Gisd.Sped.Schema.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this DataCollection self) => JsonConvert.SerializeObject(self, Gisd.Sped.Schema.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                GenderConverter.Singleton,
                YearConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class GenderConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Gender) || t == typeof(Gender?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "F":
                    return Gender.F;
                case "M":
                    return Gender.M;
            }
            throw new Exception("Cannot unmarshal type Gender");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Gender)untypedValue;
            switch (value)
            {
                case Gender.F:
                    serializer.Serialize(writer, "F");
                    return;
                case Gender.M:
                    serializer.Serialize(writer, "M");
                    return;
            }
            throw new Exception("Cannot marshal type Gender");
        }

        public static readonly GenderConverter Singleton = new GenderConverter();
    }

    internal class YearConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Year) || t == typeof(Year?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "SY 2019-2020":
                    return Year.Sy20192020;
                case "SY 2020-2021":
                    return Year.Sy20202021;
            }
            throw new Exception("Cannot unmarshal type Year");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Year)untypedValue;
            switch (value)
            {
                case Year.Sy20192020:
                    serializer.Serialize(writer, "SY 2019-2020");
                    return;
                case Year.Sy20202021:
                    serializer.Serialize(writer, "SY 2020-2021");
                    return;
            }
            throw new Exception("Cannot marshal type Year");
        }

        public static readonly YearConverter Singleton = new YearConverter();
    }
}
